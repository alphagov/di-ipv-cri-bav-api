openapi: 3.0.1
info:
  title:
     Fn::Sub: "${AWS::StackName} - BAV Credential Issuer Private API"
  version: "1.0"
  description: >-
    Bank Account Verification CRI - Frontend and Backend API specification
  contact:
    name: Mudassar Jafer
    email: mudassar.jafer@digital.cabinet-office.gov.uk
servers:
  - url: https://www.example.com
tags:
  - name: Backend - Common CRI Lambda
    description: Backend endpoints implemented by the Common CRI Lambda functions
  - name: Backend - BAV CRI specific
    description: Backend endpoints implementing functions specific to the Claimed Identity CRI
  - name: Frontend
    description: Frontend endpoints implementing rendering and routing

paths:
  /session:
    post:
      operationId: postVerifyAuthorizeRequest
      summary: Verify the incoming JAR request and initiate a Session
      description: >-
        Verify Authorization Request - Verify the [JAR request](https://datatracker.ietf.org/doc/rfc9101/)
        received from calling RP. This service only supports section Passing a Request Object by Value (see
        section 5.1). If verified, a new session will be created and a `session_id` will be returned to the
        caller.
      tags:
        - Backend - Common CRI Lambda
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        "201":
          description: >-
            Created - OAuth token is valid - Session details have been stored in the backend and a `session_id`
            is returned.
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResponse"
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SessionFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /authorization:
    get:
      operationId: getAuthorization
      summary: Issue an authorization code for the session
      description: >-
        Issue Authorization Code - Issue an authorization code for the frontend to use in the redircted
        response to a `GET /authorize` call. This service will only work if the required claimed identity
        data is recorded as being received by that session; and this service can only be used once for
        each session.
      tags:
        - Backend - Common CRI Lambda
      parameters:
        - $ref: "#/components/parameters/SessionHeader"
      responses:
        "200":
          description: "Issue an authorization code. Note - currently persists the code against the session as a side effect"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
        "401":
          description: "Unauthorized"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: "500 response"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizationFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /userinfo:
    post:
      operationId: postUserInfo
      summary: Retrieve the JWT contained the Verified Credential(s) for a given Auth Session.
      description: >-
        Returns a JWT containing the user information and associated verified credentials as supplied by the
        biometrics vendor. Requires an access token as issued by `POST /token`, and can only be called once.
      tags:
        - Backend - CI CRI specific
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        "200":
          description: >-
            OK - Signed Verified Credential returned as a JWT
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoJwt"
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserInfoFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /verify-account:
    post:
      operationId: postVerifyAccount
      summary: verify bank account details for a user
      description: >-
        verify name, account number and sort code against the HMRC bank account verification service
      tags:
        - Backend - Common CRI Lambda
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyAccountRequest'
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        "201":
          description: >-
            Success response for either a full or partial bank account match
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "400":
          description: >-
            Bad Request - verify account data failed validation and has not been persisted
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VerifyAccountFunction.Arn}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

  /.well-known/jwks.json:
    get:
      operationId: getWellKnownJwksJson
      summary: Retrieve the signing public keys for JWTs issued by `POST /userinfo`.
      description: >-
        Return the current valid public keys used to sign JWTs issued by the service as a JSON Web Key Set
      tags:
        - Backend - BAV CRI specific
      responses:
        "200":
          description: >-
            OK - key ring returned
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWKSFile"
        "400":
          description: 400 response
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        credentials:
          Fn::GetAtt: [ "JWKSBucketRole", "Arn" ]
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:s3:path/${JsonWebKeysBucket}/.well-known/jwks.json"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"

  /token:
    post:
      operationId: postToken
      summary: Exchange an Authorization Code for an Access Token
      description: >-
        Issue Access Token. OAuth2 standard endpoint which exchanges the authorization_code supplied and
        returns a signed access_token which can be used directly in API calls as a Bearer token. Note
        the service will only issue an access token once for any given session.
      tags:
        - Backend - Common CRI Lambda
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IssueTokenRequest'
      responses:
        "200":
          description: >-
            Created - OAuth token is valid - Session details have been stored in the backend and a `session_id`
            is returned.
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueTokenResponse"
        "401":
          description: Unauthorized
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
        "500":
          description: Internal Server Error
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthErrorResponse"
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Access-Token-${AWS::StackName}:live/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

components:
  schemas:
    SessionRequest:
      type: object
      additionalProperties: false
      required:
        - client_id
        - request
      properties:
        client_id:
          type: string
          example: abcdefgh
          description: >-
            the OAuth client identifier which has been registered with BAV
        request:
          type: string
          example: eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIn0.AISIEvimTkm_1gfG9gQA5btB7lHu2riU90KI-UyuH35CABCJk_KKUTsptasmNG5n6Zo6jL8vlMrj3y4A44nDrnTeH_OGLByerCd-EKNx9EZrplcsQ8VM8dip7LCUQy10OGH6ggoMGq9TbiC7lP_8md8UgvcNzd_zm6q6Ade5zd_sUzTWNSX3q6lVfpkpuMdj-2l18zk-yJEvaDArP7U1VBT8531ixxW1lUKflTHlyC-t6B-45R04o3KubhVb-_gVt7KKXo7UQUY-wmHiTUGsxWb3xrROKs6tv4Ug7Oi1MVngesL8CahjyLamvk-tdS1ji2rxn47Xs2Q21FQf3cHPtQ.9bNdWPzw2Cf6uyR_.VVj96Ejcc84yKv3gfHY6Nond9FJrQ-AoQ7pQSlmnzicoJ7hpHwyHUuNiSJNO4q631VKAblNbdprAA11PcYL3f_hcocxwORR8e3tQlDG9TFn6lxg3l9M34ccJrkD51ippIpsChQhIFqS2hU5W9BFyOPdpQhlhtc7R-d0zqbylh-z-snzxRG7Q-hVsBQpOzOLMDWcJNOCHlF8kZjp4dlWYFj3Yl_9HAa-hrY-DpoxdkvXVIrBdJarD77Bwwxo8y1IWEgCuDA8t5ZmrZMY9fxoufQg9jW5D7hB3qysgSo3S-6SFyt3rP_WD5ecezRrTCY-voDeWBtfdwuKo5UUaPidN4ut1n8SXAdoANxgbuEhyABjvMESi3AnWwZRx8yh3xEMVSwZ8kFQ4cVeBW2hrkiSXMjL1Wtz6nhhY9itFcmzBU4JMvoYfdf-ZZP-F4ph_Xh9CRS7rBzmrgUt81LahzYfCY91lS93qT7r3Wrh0OfIb0vvIkVUebDdCZw25PoG2oREty4k59z7j9ho8VqbtSS6_kpJGWx8Sikut1I-bVduk79Vf1MwEGxSRvZ_pyZHxxZDe19GPfamhctFXMcebyJoT2zwWhcW4AWFSUtm2JI36sZhFcsdRIRBfSjJ4MNXdlrHdOyhvo8SwTWpfO5lU9yyF8lANbXxjdnRSV6sR1iaBs_16slbWJX3WC6RmC76x8MlHn1fLBK_lU_IeZChZqLCwqUC3CXbk17OkTkdeCqFyZSS5rlfm-EiPvam6iW51tA-ywxrmUjkCDE_k-zZIZTVVSg.3YAfgcQ4ZkPtYPNvOzWCLQ
          description: >-
            an JWT which has been signed with the clients signing private key and encrypted with the BAV public
            encryption key.
    SessionResponse:
      type: object
      additionalProperties: true
      required:
        - session_id
        - redirect_uri
        - state
      properties:
        session_id:
          type: string
          description: Session ID
          format: uuid
          example: 11111111-1111-1111-1111-111111111111
        state:
          type: string
          example: abcdefgh
          description: >-
            The exact value for `state` as received from the client in the authorization request
        redirect_uri:
          type: string
          example: https://www.example.com/receiveToken
          description: >-
            the OAuth client identifier which has been registered with CI CRI
    IssueTokenRequest:
      type: object
      additionalProperties: false
      required:
        - grant_type
        - code
        - redirect_uri
      properties:
        grant_type:
          type: string
          example: authorization_code
          description: >-
            OAuth grant type. At present the only supported grant type is `authorization_code`.
          enum:
            - authorization_code
        code:
          type: string
          format: uuid
          example: 33333333-3333-3333-3333-333333333333
          description: >-
            `authorization_code` as issued by POST /authorizationCode.
        redirect_uri:
          type: string
          example: https://www.example.com/receiveToken
          description: >-
            the OAuth client identifier which has been registered with CRI
        client_assertion:
          type: string
          example: abcdefgh
          description: >-
            Client assertion (use for client credentials flow, not supported here)
        client_assertion_type:
          type: string
          example: jwt_bearer
          description: >-
            Client assertion type (use for client credentials flow, not supported here)
    UserInfoJwt:
      type: object
      additionalProperties: true
      required:
        - sub
        - 'https://vocab.account.gov.uk/v1/credentialJWT'
      properties:
        sub:
          type: string
          format: uuid
          description: >-
            `sub` value - this should be the same as encoded in the signed JWT
          example: 22222222-2222-2222-2222-222222222222
        'https://vocab.account.gov.uk/v1/credentialJWT':
          type: string
          description: >-
            Signed JWT response with user credentials including the outcome from the biometric checks
    IssueTokenResponse:
      type: object
      additionalProperties: true
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: >-
            The actual issued access token. Note this is a short-lived bearer token and needs to be
            protected as a secret.
          example: ABCDABCDABCDABCDABCDABCDABCD
        token_type:
          type: string
          example: bearer
          description: >-
            Token type - usually `bearer`.
        expires_in:
          type: number
          description: >-
            The lifetime in seconds of the issued access token
          example: 3600
    VerifyAccountRequest:
      type: object
      additionalProperties: false
      required:
        - sort_code
        - account_number
      properties:
        sort_code:
          type: string
          pattern: ^[0-9]{6}$
          example: "000000"
          description: 6 digit sort code
        account_number:
          type: string
          # TODO
          # pattern: ^[0-9]{6}$
          example: "12345678"
          description: bank account number
          # TODO name
    OAuthErrorResponse:
      type: object
      additionalProperties: true
      required:
        - error
      properties:
        error:
          type: string
          enum:
            - access_denied
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
            - server_error
            - temporarily_unavailable
            - unsupported_response_type
            - authorization_pending
          example: access_denied
          description: >-
            A single ASCII [USASCII] error code from the following
        error_description:
          type: string
          example: Access was denied as auth code was not recognised
          description: >-
            Human-readable ASCII [USASCII] text providing additional information, used to assist the
            client developer in understanding the error that occurred.
        error_uri:
          type: string
          example: https://example.com/error1.html
          description: >-
            A URI identifying a human-readable web page with information about the error, used to
            provide the client developer with additional information about the error.
    AuthorizationResponse:
      required:
        - "redirect_uri"
        - "code"
        - "state"
      type: "object"
      properties:
        code:
          type: "string"
          example: "981bb74c-3b5e-462e-ba3a-abf868e5da68"
        state:
          type: "string"
          example: "state"
          minLength: 1
        redirect_uri:
          type: "string"
          format: "uri"
          example: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
    JWKSFile:
      type: object
      required:
        - keys
      additionalProperties: true
      properties:
        keys:
          type: array
          description: >-
            The value of the `keys` parameter is an array of JWK values. By default, the order of the JWK
            values within the array does not imply an order of preference among them, although applications of
            JWK Sets can choose to assign a meaning to the order for their purposes, if desired.
          items:
            type: object
            additionalProperties: true
            description: >-
              A JSON Web Key (JWK) as defined by [RFC7517](https://www.rfc-editor.org/rfc/rfc7517)
            properties:
              kty:
                type: string
                description: >-
                  The `kty` (key type) parameter identifies the cryptographic algorithm family used with the
                  key, such as `RSA or `EC`
              use:
                type: string
                enum:
                  - sig
                  - enc
                description: >-
                  The "use" (public key use) parameter identifies the intended use of the public key.  The
                  "use" parameter is employed to indicate whether a public key is used for encrypting data or
                  verifying the signature on data. Valid values are `sig` (signature) and `enc` (encryption).
              key_ops:
                type: string
                description: >-
                  The `key_ops` (key operations) parameter identifies the operation(s) for which the key is
                  intended to be used.  The `key_ops` parameter is intended for use cases in which public,
                  private, or symmetric keys may be present.
              alg:
                type: string
                description: >-
                  The `alg` (algorithm) parameter identifies the algorithm intended for use with the key.
              kid:
                type: string
                description: >-
                  The `kid` (key ID) parameter is used to match a specific key. This is used, for instance,
                  to choose among a set of keys within a JWK Set during key rollover.  The structure of the
                  `kid` value is unspecified.
              x5u:
                type: string
                format: uri
                description: >-
                  The `x5u` (X.509 URL) parameter is a URI that refers to a resource for an X.509 public key
                  certificate or certificate chain.
              x5c:
                type: array
                description: >-
                  The `x5c` (X.509 certificate chain) parameter contains a chain of one or more PKIX
                  certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate
                  value strings.
                items:
                  type: string
                  description: PKIX certificate [RFC5280]
              x5t:
                type: string
                description: >-
                  The `x5t` (X.509 certificate SHA-1 thumbprint) parameter is a base64url-encoded SHA-1
                  thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate.
              x5t#S256:
                type: string
                description: >-
                  The `x5t#S256` (X.509 certificate SHA-256 thumbprint) parameter is a base64url-encoded
                  SHA-256 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate.
            required:
              - kty
  parameters:
    SessionHeader:
      name: session-id
      in: header
      description: A UUID generated by the Session API to act as a primary key for the Session in DynamoDB
      required: true
      schema:
        type: string
    Authorization:
      in: header
      name: Authorization
      example: bearer abcdefghijklmnopqrstuvwxyz
      required: true
      description: >-
        OAuth Bearer token - this it the `authorizationCode` returned by `POST /authorization`
      schema:
        type: string
    SessionId:
      in: header
      name: x-govuk-signin-session-id
      schema:
        type: string
        format: uuid
      example: 44444444-4444-4444-4444-444444444444
      description: >-
        `sessionId` as returned by `POST /session` endpoint
      required: true
